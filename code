// lib/auth-utils.ts
import { useUser } from '@auth0/nextjs-auth0/client';
import { Claims } from '@auth0/nextjs-auth0';

export interface UserRoles {
  roles: string[];
  permissions: string[];
}

export const REQUIRED_ROLES = {
  ADMIN: 'admin',
  EDITOR: 'editor', 
  VIEWER: 'viewer',
  DATA_ANALYST: 'Data Analyst', // Note: Capital D and A as specified
} as const;

export const REQUIRED_PERMISSIONS = {
  READ_REPORTS: 'read:reports',
  CREATE_REPORTS: 'create:reports',
  EDIT_REPORTS: 'edit:reports',
  DELETE_REPORTS: 'delete:reports',
  READ_ANALYTICS: 'read:analytics',
} as const;

export function getUserRoles(user: any): string[] {
  const namespace = 'https://agency-inc-demo.com';
  return user?.[`${namespace}/roles`] || [];
}

export function getUserPermissions(user: any): string[] {
  const namespace = 'https://agency-inc-demo.com';
  return user?.[`${namespace}/permissions`] || [];
}

export function hasRole(user: any, role: string): boolean {
  const userRoles = getUserRoles(user);
  return userRoles.includes(role);
}

export function hasPermission(user: any, permission: string): boolean {
  const userPermissions = getUserPermissions(user);
  return userPermissions.includes(permission);
}

export function hasAnalyticsAccess(user: any): boolean {
  return hasRole(user, REQUIRED_ROLES.DATA_ANALYST) && 
         hasPermission(user, REQUIRED_PERMISSIONS.READ_ANALYTICS);
}

// Custom hook for role checking
export function useRoles() {
  const { user, isLoading } = useUser();
  
  return {
    user,
    isLoading,
    roles: getUserRoles(user),
    permissions: getUserPermissions(user),
    hasRole: (role: string) => hasRole(user, role),
    hasPermission: (permission: string) => hasPermission(user, permission),
    hasAnalyticsAccess: () => hasAnalyticsAccess(user),
    isAdmin: () => hasRole(user, REQUIRED_ROLES.ADMIN),
    isEditor: () => hasRole(user, REQUIRED_ROLES.EDITOR),
    isViewer: () => hasRole(user, REQUIRED_ROLES.VIEWER),
    isDataAnalyst: () => hasRole(user, REQUIRED_ROLES.DATA_ANALYST),
  };
}